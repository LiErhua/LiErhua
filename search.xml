<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2017%2F09%2F19%2F%E5%A4%9C%E9%9B%A8%E7%A7%8B%E7%81%AF%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[音乐小札]]></title>
    <url>%2F2017%2F09%2F13%2F%E7%9F%B3%E6%A5%A0%E5%B0%8F%E6%9C%AD%2F</url>
    <content type="text"><![CDATA[特别喜欢日本版深夜食堂的主题曲： 一部动漫的主题曲《未闻花名》： 一声画角谯门，半庭新月黄昏，雪里山前水滨。竹篱茅舍，淡烟衰草孤村。 以前一想到冬天，就是雪，就是春节，就是白水煮豆腐，就是凛冽但是清澈的风……一棵梅开了冬天就来了 速去逮一只猫~ 晴空一鹤排云上，便引诗情到碧霄 张爱玲的故事~]]></content>
      <categories>
        <category>essay</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python 数据处理笔记pandas（一）]]></title>
    <url>%2F2017%2F09%2F10%2Fpython%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0pandas%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[pandas是进行数据处理的十分流行的第三方库 pandas提供了： 便于操作数据的数据类型，即提供了高效的数据类型 很多的分析函数和分析工具，优雅的数据分析的操作 基于NumPy实现的一个扩展库。 pandas主要提供了两个数据类型： Series —— 相当于一个一维的数据类型 DataFrame — — 相当于一个多维的数据类型 NumPy Pandas 基础数据类型 扩展数据类型 关注数据的结构表达 关注数据的应用表达 注重维度：数据之间的关系 注重索引：数据与索引之间的关系 ###两种数据类型 Series Series由一组数据和它的索引组成 index_0 —&gt; data_a index_1 —&gt; data_b index_2 —&gt; data_c 值得类型可以相同，可以不同 可以接收生成Series对象的值有：array-like，列表，字典，ndarray…… DataFrame 一个表格型的数据类型，每列值得类型可以不同 既有行索引，又有列索引；每一行的索引成为Index，每一列的索引称为column 可以表达二维或者多维数据 可由如下类型创建 二维的ndarray对象 一维的ndarray，列表，字典，元组或者Series构成的字典 Series类 其他的DataFrame类型 12345import pandas as pdimport numpy as npdb = pd.DataFrame(np.arange(16).reshape(4,4))db[2]#输出第3列db.ix[1]#输出第2行 对于一个DataFrame对象d 12345678910#d.index和d.columns的类型都是Index类d.index&gt;&gt;&gt; RangeIndex(start=0, stop=4, step=1)type(d.index)&gt;&gt;&gt; pandas.indexes.range.RangeIndexd.columns&gt;&gt;&gt; Index([0, 1, 'new', 2, 3], dtype='object')type(d.columns)&gt;&gt;&gt; pandas.indexes.base.Index#Index对象是不可修改的类型 NOTICE:也就是说Series和DataFrame的索引都是Index类型，而不是整数或者其他的String等类 数据类型的操作]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python数据处理笔记numpy篇(一)]]></title>
    <url>%2F2017%2F09%2F02%2FPython%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0numpy%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[关键词：基础数据输入方式，数据选取方式 基础数据输入方式 123456789101112131415161718192021222324252627import numpy as np#np中不同数据的输入方式np.array(object) #object 是一个array_like,比如list,range #[1,2,3]的类型是list;range(3)的类型是range #但是np.array([1,2,3])和np.array(range(3))的返回值类型都是numpy.ndarray ------ &gt;&gt;&gt;np.array([1,2,3]) array([1,2,3]) &gt;&gt;&gt;print(np.array([1,2,3])) [1 2 3] #直接打印出来的没有逗号分隔 ------np.arange([start,]stop,[step,]dtype = None) #返回值也是ndarray类型 #输入格式与range相似，都是出入初值、终值、步长,可以用这一点来避免与array混淆 ------ &gt;&gt;&gt;np.arange(1,7,2) array([1,3,5]) ------np.linspace(start,stop,num = 50) #返回值是ndarray #出入为初值，终值，分隔的点数（num是指在初值终值之间平均分为多少点）np.loadtxt(path)#可打开的格式包含一般的txt,csv,dat等格式#返回值是ndarray 数据选取方式12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#数据的选取方式#第一个例子————一维data = np.arange(7) #形式如此data[start:stop:step,] #与list的切片使用方式是一致的 ------ &gt;&gt;&gt;data[1:6:2] array([1,3,5]) &gt;&gt;&gt;data[::-1][::2] array([6,4,2,0]) ------#例子二————二维data = np.array([[1,2,3], [4,5,6], [7,8,9]]) #形式为data[row,column] #其中row与column的切片方式与一维的是一致的，一定注意二者（row与column）之间有","分隔 ------ &gt;&gt;&gt;data[:,: ]#data的所有行所有列 array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) &gt;&gt;&gt;data[0,:]#所有列的第一行数据(就是第一行数据) array([1, 2, 3]) &gt;&gt;&gt;data[1,1:]#第二列之后所有列的第二行数据 array([5, 6]) &gt;&gt;&gt;data[0,0]#第一行第一列数据，返回值为numpy.int64 1 ------data = np.arange(24).reshape(2,3,4)#这是一个三维的array，英文表示分别为floor,row,columndata = array([[[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]], [[12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23]]])&gt;&gt;&gt;data[:,:,:]#输出整个data&gt;&gt;&gt;data[0,:,:]#等于data[0],第一个floor的所有的行和列array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])&gt;&gt;&gt;data[:,1,:]#所有floor的第二行array([[ 4, 5, 6, 7], [16, 17, 18, 19]])&gt;&gt;&gt;data[:,:,1]#所有floor的第二列array([[ 1, 5, 9], [13, 17, 21]])]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设置全局参数——定制matplotlib（部分翻译）]]></title>
    <url>%2F2017%2F09%2F01%2FPython%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86matplotlib%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%8F%82%E6%95%B0%2F</url>
    <content type="text"><![CDATA[关键词：style，rcParams，rc 全局参数的设置—— ###使用style包： style包能让你很轻松的切花绘图的类型，预先在matplotlib中定义好了许多style类型供选择，使用的方式如下 12import matplotlib.pyplot as pltplt.style.use('ggplot')#ggplot就是一种style的名称 获得所有提供的styles的方法如下: 1style_list = print(plt.style.available) 输出的所有类型如下(使用的时候可以如下选择）： 123456789101112131415161718192021['seaborn-paper', 'seaborn-dark-palette', 'seaborn-notebook', 'dark_background', 'seaborn-whitegrid', 'seaborn-talk', 'fivethirtyeight', 'ggplot', 'seaborn-ticks', 'grayscale', 'bmh', 'seaborn-dark', 'seaborn-poster', 'seaborn-deep', 'seaborn-darkgrid', 'classic', 'seaborn-white', 'seaborn-colorblind', 'seaborn-bright', 'seaborn-pastel', 'seaborn-muted'] 定义属于自己的属性你可以定义属于自己风格的style，具体的定义方式请查看源文档。 复合风格 1plt.style.use(['bmh','dark_background']) 1#plt.style.use(style)--&gt;其中style类型有style : str, dict, or list 类型 介绍 str The name of a style or a path/URL to a style file. For a list of available style names, see style.available. dict Dictionary with valid key/value pairs formatplotlib.rcParams. list A list of style specifiers (str or dict) applied from first to last in the list. 暂时风格 不做介绍 rcParams模块（十分常用）动态rc设定 我们可以动态的改变已经在style中预设好的rc参数，所有的rc设置都被存储在一个类似字典的变量中——matplotlib.rcParams，这是一个全局包，工作方式有如下几种： 1234#方式一import matplotlib as mplmpl.rcParams['lines.linewidth'] = 2 #类字典格式，键值对mpl.rcParams['lines.color'] = 'r' 12#方式二mpl.rc('lines',linewidth = 2,color = 'r') 1234567#方式三font = &#123; 'family' : 'monospace', 'weight' : 'bold', 'size' : 'larger' &#125;mpl.rc('font',**font) NOTICE: 1234#关于rc的解释matplotlib.rc(group, **kwargs)#即rc接受一个Group,这个Group就是类型，比如'font','lines','text'等等#后面的可以直接接受单个的键值对，也可以直接接收字典 所有Group类型包含的属性见英文原文最后的matplotlibrc文档的示例 以下为原文： Customizing matplotlibUsing style sheetsThe style package adds support for easy-to-switch plotting “styles” with the same parameters as a matplotlibrc file (which is read at startup to configure matplotlib). There are a number of pre-defined styles provided by matplotlib. For example, there’s a pre-defined style called “ggplot”, which emulates the aesthetics of ggplot (a popular plotting package for R). To use this style, just add: 12&gt;&gt;&gt; import matplotlib.pyplot as plt&gt;&gt;&gt; plt.style.use(&apos;ggplot&apos;) To list all available styles, use: 1&gt;&gt;&gt; print(plt.style.available) Defining your own styleYou can create custom styles and use them by calling style.use with the path or URL to the style sheet. Additionally, if you add your &lt;style-name&gt;.mplstyle file to mpl_configdir/stylelib, you can reuse your custom style sheet with a call to style.use(&lt;style-name&gt;). By default mpl_configdir should be ~/.config/matplotlib, but you can check where yours is with matplotlib.get_configdir(); you may need to create this directory. You also can change the directory where matplotlib looks for the stylelib/ folder by setting the MPLCONFIGDIR environment variable, see matplotlib configuration and cache directory locations. Note that a custom style sheet in mpl_configdir/stylelib will override a style sheet defined by matplotlib if the styles have the same name. For example, you might want to create mpl_configdir/stylelib/presentation.mplstyle with the following: 123456axes.titlesize : 24axes.labelsize : 20lines.linewidth : 3lines.markersize : 10xtick.labelsize : 16ytick.labelsize : 16 Then, when you want to adapt a plot designed for a paper to one that looks good in a presentation, you can just add: 12&gt;&gt;&gt; import matplotlib.pyplot as plt&gt;&gt;&gt; plt.style.use(&apos;presentation&apos;) Composing stylesStyle sheets are designed to be composed together. So you can have a style sheet that customizes colors and a separate style sheet that alters element sizes for presentations. These styles can easily be combined by passing a list of styles: 12&gt;&gt;&gt; import matplotlib.pyplot as plt&gt;&gt;&gt; plt.style.use([&apos;dark_background&apos;, &apos;presentation&apos;]) ote that styles further to the right will overwrite values that are already defined by styles on the left. Temporary stylingIf you only want to use a style for a specific block of code but don’t want to change the global styling, the style package provides a context manager for limiting your changes to a specific scope. To isolate your styling changes, you can write something like the following: 123456789&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; import matplotlib.pyplot as plt&gt;&gt;&gt;&gt;&gt;&gt; with plt.style.context((&apos;dark_background&apos;)):&gt;&gt;&gt; plt.plot(np.sin(np.linspace(0, 2 * np.pi)), &apos;r-o&apos;)&gt;&gt;&gt;&gt;&gt;&gt; # Some plotting code with the default style&gt;&gt;&gt;&gt;&gt;&gt; plt.show() matplotlib rcParamsDynamic rc settingsYou can also dynamically change the default rc settings in a python script or interactively from the python shell. All of the rc settings are stored in a dictionary-like variable called matplotlib.rcParams, which is global to the matplotlib package. rcParams can be modified directly, for example: 123import matplotlib as mplmpl.rcParams[&apos;lines.linewidth&apos;] = 2mpl.rcParams[&apos;lines.color&apos;] = &apos;r&apos; Matplotlib also provides a couple of convenience functions for modifying rc settings. The matplotlib.rc() command can be used to modify multiple settings in a single group at once, using keyword arguments: 12import matplotlib as mplmpl.rc(&apos;lines&apos;, linewidth=2, color=&apos;r&apos;) The matplotlib.rcdefaults() command will restore the standard matplotlib default settings. There is some degree of validation when setting the values of rcParams, see matplotlib.rcsetup for details. The matplotlibrc filematplotlib uses matplotlibrc configuration files to customize all kinds of properties, which we call rc settings or rc parameters. You can control the defaults of almost every property in matplotlib: figure size and dpi, line width, color and style, axes, axis and grid properties, text and font properties and so on. matplotlib looks for matplotlibrc in four locations, in the following order: matplotlibrc in the current working directory, usually used for specific customizations that you do not want to apply elsewhere. $MATPLOTLIBRC/matplotlibrc. It next looks in a user-specific place, depending on your platform: On Linux and FreeBSD, it looks in .config/matplotlib/matplotlibrc (or $XDG_CONFIG_HOME/matplotlib/matplotlibrc) if you’ve customized your environment. On other platforms, it looks in .matplotlib/matplotlibrc. See matplotlib configuration and cache directory locations. *INSTALL*/matplotlib/mpl-data/matplotlibrc, where *INSTALL* is something like /usr/lib/python3.5/site-packages on Linux, and maybe C:\Python35\Lib\site-packages on Windows. Every time you install matplotlib, this file will be overwritten, so if you want your customizations to be saved, please move this file to your user-specific matplotlib directory. To display where the currently active matplotlibrc file was loaded from, one can do the following: 123&gt;&gt;&gt; import matplotlib&gt;&gt;&gt; matplotlib.matplotlib_fname()&apos;/home/foo/.config/matplotlib/matplotlibrc&apos; See below for a sample matplotlibrc file. A sample matplotlibrc file123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627### MATPLOTLIBRC FORMAT# This is a sample matplotlib configuration file - you can find a copy# of it on your system in# site-packages/matplotlib/mpl-data/matplotlibrc. If you edit it# there, please note that it will be overwritten in your next install.# If you want to keep a permanent local copy that will not be# overwritten, place it in the following location:# unix/linux:# $HOME/.config/matplotlib/matplotlibrc or# $XDG_CONFIG_HOME/matplotlib/matplotlibrc (if $XDG_CONFIG_HOME is set)# other platforms:# $HOME/.matplotlib/matplotlibrc## See http://matplotlib.org/users/customizing.html#the-matplotlibrc-file for# more details on the paths which are checked for the configuration file.## This file is best viewed in a editor which supports python mode# syntax highlighting. Blank lines, or lines starting with a comment# symbol, are ignored, as are trailing comments. Other lines must# have the format# key : val # optional comment## Colors: for the color values below, you can either use - a# matplotlib color string, such as r, k, or b - an rgb tuple, such as# (1.0, 0.5, 0.0) - a hex string, such as ff00ff - a scalar# grayscale intensity such as 0.75 - a legal html color name, e.g., red,# blue, darkslategray#### CONFIGURATION BEGINS HERE# The default backend; one of GTK GTKAgg GTKCairo GTK3Agg GTK3Cairo# MacOSX Qt4Agg Qt5Agg TkAgg WX WXAgg Agg Cairo GDK PS PDF SVG# Template.# You can also deploy your own backend outside of matplotlib by# referring to the module name (which must be in the PYTHONPATH) as# &apos;module://my_backend&apos;.backend : TkAgg# If you are using the Qt4Agg backend, you can choose here# to use the PyQt4 bindings or the newer PySide bindings to# the underlying Qt4 toolkit.#backend.qt4 : PyQt4 # PyQt4 | PySide# Note that this can be overridden by the environment variable# QT_API used by Enthought Tool Suite (ETS); valid values are# &quot;pyqt&quot; and &quot;pyside&quot;. The &quot;pyqt&quot; setting has the side effect of# forcing the use of Version 2 API for QString and QVariant.# The port to use for the web server in the WebAgg backend.# webagg.port : 8888# If webagg.port is unavailable, a number of other random ports will# be tried until one that is available is found.# webagg.port_retries : 50# When True, open the webbrowser to the plot that is shown# webagg.open_in_browser : True# When True, the figures rendered in the nbagg backend are created with# a transparent background.# nbagg.transparent : False# if you are running pyplot inside a GUI and your backend choice# conflicts, we will automatically try to find a compatible one for# you if backend_fallback is True#backend_fallback: True#interactive : False#toolbar : toolbar2 # None | toolbar2 (&quot;classic&quot; is deprecated)#timezone : UTC # a pytz timezone string, e.g., US/Central or Europe/Paris# Where your matplotlib data lives if you installed to a non-default# location. This is where the matplotlib fonts, bitmaps, etc reside#datapath : /home/jdhunter/mpldata### LINES# See http://matplotlib.org/api/artist_api.html#module-matplotlib.lines for more# information on line properties.#lines.linewidth : 1.5 # line width in points#lines.linestyle : - # solid line#lines.color : C0 # has no affect on plot(); see axes.prop_cycle#lines.marker : None # the default marker#lines.markeredgewidth : 1.0 # the line width around the marker symbol#lines.markersize : 6 # markersize, in points#lines.dash_joinstyle : miter # miter|round|bevel#lines.dash_capstyle : butt # butt|round|projecting#lines.solid_joinstyle : miter # miter|round|bevel#lines.solid_capstyle : projecting # butt|round|projecting#lines.antialiased : True # render lines in antialiased (no jaggies)# The three standard dash patterns. These are scaled by the linewidth.#lines.dashed_pattern : 2.8, 1.2#lines.dashdot_pattern : 4.8, 1.2, 0.8, 1.2#lines.dotted_pattern : 1.1, 1.1#lines.scale_dashes : True#markers.fillstyle: full # full|left|right|bottom|top|none### PATCHES# Patches are graphical objects that fill 2D space, like polygons or# circles. See# http://matplotlib.org/api/artist_api.html#module-matplotlib.patches# information on patch properties#patch.linewidth : 1 # edge width in points.#patch.facecolor : C0#patch.edgecolor : black # if forced, or patch is not filled#patch.force_edgecolor : False # True to always use edgecolor#patch.antialiased : True # render patches in antialiased (no jaggies)### HATCHES#hatch.color : k#hatch.linewidth : 1.0### Boxplot#boxplot.notch : False#boxplot.vertical : True#boxplot.whiskers : 1.5#boxplot.bootstrap : None#boxplot.patchartist : False#boxplot.showmeans : False#boxplot.showcaps : True#boxplot.showbox : True#boxplot.showfliers : True#boxplot.meanline : False#boxplot.flierprops.color : &apos;k&apos;#boxplot.flierprops.marker : &apos;o&apos;#boxplot.flierprops.markerfacecolor : &apos;none&apos;#boxplot.flierprops.markeredgecolor : &apos;k&apos;#boxplot.flierprops.markersize : 6#boxplot.flierprops.linestyle : &apos;none&apos;#boxplot.flierprops.linewidth : 1.0#boxplot.boxprops.color : &apos;k&apos;#boxplot.boxprops.linewidth : 1.0#boxplot.boxprops.linestyle : &apos;-&apos;#boxplot.whiskerprops.color : &apos;k&apos;#boxplot.whiskerprops.linewidth : 1.0#boxplot.whiskerprops.linestyle : &apos;-&apos;#boxplot.capprops.color : &apos;k&apos;#boxplot.capprops.linewidth : 1.0#boxplot.capprops.linestyle : &apos;-&apos;#boxplot.medianprops.color : &apos;C1&apos;#boxplot.medianprops.linewidth : 1.0#boxplot.medianprops.linestyle : &apos;-&apos;#boxplot.meanprops.color : &apos;C2&apos;#boxplot.meanprops.marker : &apos;^&apos;#boxplot.meanprops.markerfacecolor : &apos;C2&apos;#boxplot.meanprops.markeredgecolor : &apos;C2&apos;#boxplot.meanprops.markersize : 6#boxplot.meanprops.linestyle : &apos;none&apos;#boxplot.meanprops.linewidth : 1.0### FONT## font properties used by text.Text. See# http://matplotlib.org/api/font_manager_api.html for more# information on font properties. The 6 font properties used for font# matching are given below with their default values.## The font.family property has five values: &apos;serif&apos; (e.g., Times),# &apos;sans-serif&apos; (e.g., Helvetica), &apos;cursive&apos; (e.g., Zapf-Chancery),# &apos;fantasy&apos; (e.g., Western), and &apos;monospace&apos; (e.g., Courier). Each of# these font families has a default list of font names in decreasing# order of priority associated with them. When text.usetex is False,# font.family may also be one or more concrete font names.## The font.style property has three values: normal (or roman), italic# or oblique. The oblique style will be used for italic, if it is not# present.## The font.variant property has two values: normal or small-caps. For# TrueType fonts, which are scalable fonts, small-caps is equivalent# to using a font size of &apos;smaller&apos;, or about 83%% of the current font# size.## The font.weight property has effectively 13 values: normal, bold,# bolder, lighter, 100, 200, 300, ..., 900. Normal is the same as# 400, and bold is 700. bolder and lighter are relative values with# respect to the current weight.## The font.stretch property has 11 values: ultra-condensed,# extra-condensed, condensed, semi-condensed, normal, semi-expanded,# expanded, extra-expanded, ultra-expanded, wider, and narrower. This# property is not currently implemented.## The font.size property is the default font size for text, given in pts.# 10 pt is the standard value.##font.family : sans-serif#font.style : normal#font.variant : normal#font.weight : medium#font.stretch : normal# note that font.size controls default text sizes. To configure# special text sizes tick labels, axes, labels, title, etc, see the rc# settings for axes and ticks. Special text sizes can be defined# relative to font.size, using the following values: xx-small, x-small,# small, medium, large, x-large, xx-large, larger, or smaller#font.size : 10.0#font.serif : DejaVu Serif, Bitstream Vera Serif, New Century Schoolbook, Century Schoolbook L, Utopia, ITC Bookman, Bookman, Nimbus Roman No9 L, Times New Roman, Times, Palatino, Charter, serif#font.sans-serif : DejaVu Sans, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif#font.cursive : Apple Chancery, Textile, Zapf Chancery, Sand, Script MT, Felipa, cursive#font.fantasy : Comic Sans MS, Chicago, Charcoal, Impact, Western, Humor Sans, xkcd, fantasy#font.monospace : DejaVu Sans Mono, Bitstream Vera Sans Mono, Andale Mono, Nimbus Mono L, Courier New, Courier, Fixed, Terminal, monospace### TEXT# text properties used by text.Text. See# http://matplotlib.org/api/artist_api.html#module-matplotlib.text for more# information on text properties#text.color : black### LaTeX customizations. See http://wiki.scipy.org/Cookbook/Matplotlib/UsingTex#text.usetex : False # use latex for all text handling. The following fonts # are supported through the usual rc parameter settings: # new century schoolbook, bookman, times, palatino, # zapf chancery, charter, serif, sans-serif, helvetica, # avant garde, courier, monospace, computer modern roman, # computer modern sans serif, computer modern typewriter # If another font is desired which can loaded using the # LaTeX \usepackage command, please inquire at the # matplotlib mailing list#text.latex.unicode : False # use &quot;ucs&quot; and &quot;inputenc&quot; LaTeX packages for handling # unicode strings.#text.latex.preamble : # IMPROPER USE OF THIS FEATURE WILL LEAD TO LATEX FAILURES # AND IS THEREFORE UNSUPPORTED. PLEASE DO NOT ASK FOR HELP # IF THIS FEATURE DOES NOT DO WHAT YOU EXPECT IT TO. # preamble is a comma separated list of LaTeX statements # that are included in the LaTeX document preamble. # An example: # text.latex.preamble : \usepackage&#123;bm&#125;,\usepackage&#123;euler&#125; # The following packages are always loaded with usetex, so # beware of package collisions: color, geometry, graphicx, # type1cm, textcomp. Adobe Postscript (PSSNFS) font packages # may also be loaded, depending on your font settings#text.dvipnghack : None # some versions of dvipng don&apos;t handle alpha # channel properly. Use True to correct # and flush ~/.matplotlib/tex.cache # before testing and False to force # correction off. None will try and # guess based on your dvipng version#text.hinting : auto # May be one of the following: # &apos;none&apos;: Perform no hinting # &apos;auto&apos;: Use FreeType&apos;s autohinter # &apos;native&apos;: Use the hinting information in the # font file, if available, and if your # FreeType library supports it # &apos;either&apos;: Use the native hinting information, # or the autohinter if none is available. # For backward compatibility, this value may also be # True === &apos;auto&apos; or False === &apos;none&apos;.#text.hinting_factor : 8 # Specifies the amount of softness for hinting in the # horizontal direction. A value of 1 will hint to full # pixels. A value of 2 will hint to half pixels etc.#text.antialiased : True # If True (default), the text will be antialiased. # This only affects the Agg backend.# The following settings allow you to select the fonts in math mode.# They map from a TeX font name to a fontconfig font pattern.# These settings are only used if mathtext.fontset is &apos;custom&apos;.# Note that this &quot;custom&quot; mode is unsupported and may go away in the# future.#mathtext.cal : cursive#mathtext.rm : serif#mathtext.tt : monospace#mathtext.it : serif:italic#mathtext.bf : serif:bold#mathtext.sf : sans#mathtext.fontset : dejavusans # Should be &apos;dejavusans&apos; (default), # &apos;dejavuserif&apos;, &apos;cm&apos; (Computer Modern), &apos;stix&apos;, # &apos;stixsans&apos; or &apos;custom&apos;#mathtext.fallback_to_cm : True # When True, use symbols from the Computer Modern # fonts when a symbol can not be found in one of # the custom math fonts.#mathtext.default : it # The default font to use for math. # Can be any of the LaTeX font names, including # the special name &quot;regular&quot; for the same font # used in regular text.### AXES# default face and edge color, default tick sizes,# default fontsizes for ticklabels, and so on. See# http://matplotlib.org/api/axes_api.html#module-matplotlib.axes#axes.facecolor : white # axes background color#axes.edgecolor : black # axes edge color#axes.linewidth : 0.8 # edge linewidth#axes.grid : False # display grid or not#axes.titlesize : large # fontsize of the axes title#axes.titlepad : 6.0 # pad between axes and title in points#axes.labelsize : medium # fontsize of the x any y labels#axes.labelpad : 4.0 # space between label and axis#axes.labelweight : normal # weight of the x and y labels#axes.labelcolor : black#axes.axisbelow : &apos;line&apos; # draw axis gridlines and ticks below # patches (True); above patches but below # lines (&apos;line&apos;); or above all (False)#axes.formatter.limits : -7, 7 # use scientific notation if log10 # of the axis range is smaller than the # first or larger than the second#axes.formatter.use_locale : False # When True, format tick labels # according to the user&apos;s locale. # For example, use &apos;,&apos; as a decimal # separator in the fr_FR locale.#axes.formatter.use_mathtext : False # When True, use mathtext for scientific # notation.#axes.formatter.useoffset : True # If True, the tick label formatter # will default to labeling ticks relative # to an offset when the data range is # small compared to the minimum absolute # value of the data.#axes.formatter.offset_threshold : 4 # When useoffset is True, the offset # will be used when it can remove # at least this number of significant # digits from tick labels.# axes.spines.left : True # display axis spines# axes.spines.bottom : True# axes.spines.top : True# axes.spines.right : True#axes.unicode_minus : True # use unicode for the minus symbol # rather than hyphen. See # http://en.wikipedia.org/wiki/Plus_and_minus_signs#Character_codes#axes.prop_cycle : cycler(&apos;color&apos;,# [&apos;1f77b4&apos;, &apos;ff7f0e&apos;, &apos;2ca02c&apos;, &apos;d62728&apos;,# &apos;9467bd&apos;, &apos;8c564b&apos;, &apos;e377c2&apos;, &apos;7f7f7f&apos;,# &apos;bcbd22&apos;, &apos;17becf&apos;]) # color cycle for plot lines # as list of string colorspecs: # single letter, long name, or # web-style hex#axes.autolimit_mode : data # How to scale axes limits to the data. # Use &quot;data&quot; to use data limits, plus some margin # Use &quot;round_number&quot; move to the nearest &quot;round&quot; number#axes.xmargin : .05 # x margin. See `axes.Axes.margins`#axes.ymargin : .05 # y margin See `axes.Axes.margins`#polaraxes.grid : True # display grid on polar axes#axes3d.grid : True # display grid on 3d axes### DATES# These control the default format strings used in AutoDateFormatter.# Any valid format datetime format string can be used (see the python# `datetime` for details). For example using &apos;%%x&apos; will use the locale date representation# &apos;%%X&apos; will use the locale time representation and &apos;%%c&apos; will use the full locale datetime# representation.# These values map to the scales:# &#123;&apos;year&apos;: 365, &apos;month&apos;: 30, &apos;day&apos;: 1, &apos;hour&apos;: 1/24, &apos;minute&apos;: 1 / (24 * 60)&#125;# date.autoformatter.year : %Y# date.autoformatter.month : %Y-%m# date.autoformatter.day : %Y-%m-%d# date.autoformatter.hour : %m-%d %H# date.autoformatter.minute : %d %H:%M# date.autoformatter.second : %H:%M:%S# date.autoformatter.microsecond : %M:%S.%f### TICKS# see http://matplotlib.org/api/axis_api.html#matplotlib.axis.Tick#xtick.top : False # draw ticks on the top side#xtick.bottom : True # draw ticks on the bottom side#xtick.major.size : 3.5 # major tick size in points#xtick.minor.size : 2 # minor tick size in points#xtick.major.width : 0.8 # major tick width in points#xtick.minor.width : 0.6 # minor tick width in points#xtick.major.pad : 3.5 # distance to major tick label in points#xtick.minor.pad : 3.4 # distance to the minor tick label in points#xtick.color : k # color of the tick labels#xtick.labelsize : medium # fontsize of the tick labels#xtick.direction : out # direction: in, out, or inout#xtick.minor.visible : False # visibility of minor ticks on x-axis#xtick.major.top : True # draw x axis top major ticks#xtick.major.bottom : True # draw x axis bottom major ticks#xtick.minor.top : True # draw x axis top minor ticks#xtick.minor.bottom : True # draw x axis bottom minor ticks#ytick.left : True # draw ticks on the left side#ytick.right : False # draw ticks on the right side#ytick.major.size : 3.5 # major tick size in points#ytick.minor.size : 2 # minor tick size in points#ytick.major.width : 0.8 # major tick width in points#ytick.minor.width : 0.6 # minor tick width in points#ytick.major.pad : 3.5 # distance to major tick label in points#ytick.minor.pad : 3.4 # distance to the minor tick label in points#ytick.color : k # color of the tick labels#ytick.labelsize : medium # fontsize of the tick labels#ytick.direction : out # direction: in, out, or inout#ytick.minor.visible : False # visibility of minor ticks on y-axis#ytick.major.left : True # draw y axis left major ticks#ytick.major.right : True # draw y axis right major ticks#ytick.minor.left : True # draw y axis left minor ticks#ytick.minor.right : True # draw y axis right minor ticks### GRIDS#grid.color : b0b0b0 # grid color#grid.linestyle : - # solid#grid.linewidth : 0.8 # in points#grid.alpha : 1.0 # transparency, between 0.0 and 1.0### Legend#legend.loc : best#legend.frameon : True # if True, draw the legend on a background patch#legend.framealpha : 0.8 # legend patch transparency#legend.facecolor : inherit # inherit from axes.facecolor; or color spec#legend.edgecolor : 0.8 # background patch boundary color#legend.fancybox : True # if True, use a rounded box for the # legend background, else a rectangle#legend.shadow : False # if True, give background a shadow effect#legend.numpoints : 1 # the number of marker points in the legend line#legend.scatterpoints : 1 # number of scatter points#legend.markerscale : 1.0 # the relative size of legend markers vs. original#legend.fontsize : medium# Dimensions as fraction of fontsize:#legend.borderpad : 0.4 # border whitespace#legend.labelspacing : 0.5 # the vertical space between the legend entries#legend.handlelength : 2.0 # the length of the legend lines#legend.handleheight : 0.7 # the height of the legend handle#legend.handletextpad : 0.8 # the space between the legend line and legend text#legend.borderaxespad : 0.5 # the border between the axes and legend edge#legend.columnspacing : 2.0 # column separation### FIGURE# See http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure#figure.titlesize : large # size of the figure title (Figure.suptitle())#figure.titleweight : normal # weight of the figure title#figure.figsize : 6.4, 4.8 # figure size in inches#figure.dpi : 100 # figure dots per inch#figure.facecolor : white # figure facecolor; 0.75 is scalar gray#figure.edgecolor : white # figure edgecolor#figure.autolayout : False # When True, automatically adjust subplot # parameters to make the plot fit the figure#figure.max_open_warning : 20 # The maximum number of figures to open through # the pyplot interface before emitting a warning. # If less than one this feature is disabled.# The figure subplot parameters. All dimensions are a fraction of the#figure.subplot.left : 0.125 # the left side of the subplots of the figure#figure.subplot.right : 0.9 # the right side of the subplots of the figure#figure.subplot.bottom : 0.11 # the bottom of the subplots of the figure#figure.subplot.top : 0.88 # the top of the subplots of the figure#figure.subplot.wspace : 0.2 # the amount of width reserved for blank space between subplots, # expressed as a fraction of the average axis width#figure.subplot.hspace : 0.2 # the amount of height reserved for white space between subplots, # expressed as a fraction of the average axis height### IMAGES#image.aspect : equal # equal | auto | a number#image.interpolation : nearest # see help(imshow) for options#image.cmap : viridis # A colormap name, gray etc...#image.lut : 256 # the size of the colormap lookup table#image.origin : upper # lower | upper#image.resample : True#image.composite_image : True # When True, all the images on a set of axes are # combined into a single composite image before # saving a figure as a vector graphics file, # such as a PDF.### CONTOUR PLOTS#contour.negative_linestyle : dashed # dashed | solid#contour.corner_mask : True # True | False | legacy### ERRORBAR PLOTS#errorbar.capsize : 0 # length of end cap on error bars in pixels### HISTOGRAM PLOTS#hist.bins : 10 # The default number of histogram bins. # If Numpy 1.11 or later is # installed, may also be `auto`### SCATTER PLOTS#scatter.marker : o # The default marker type for scatter plots.### Agg rendering### Warning: experimental, 2008/10/10#agg.path.chunksize : 0 # 0 to disable; values in the range # 10000 to 100000 can improve speed slightly # and prevent an Agg rendering failure # when plotting very large data sets, # especially if they are very gappy. # It may cause minor artifacts, though. # A value of 20000 is probably a good # starting point.### SAVING FIGURES#path.simplify : True # When True, simplify paths by removing &quot;invisible&quot; # points to reduce file size and increase rendering # speed#path.simplify_threshold : 0.1 # The threshold of similarity below which # vertices will be removed in the simplification # process#path.snap : True # When True, rectilinear axis-aligned paths will be snapped to # the nearest pixel when certain criteria are met. When False, # paths will never be snapped.#path.sketch : None # May be none, or a 3-tuple of the form (scale, length, # randomness). # *scale* is the amplitude of the wiggle # perpendicular to the line (in pixels). *length* # is the length of the wiggle along the line (in # pixels). *randomness* is the factor by which # the length is randomly scaled.# the default savefig params can be different from the display params# e.g., you may want a higher resolution, or to make the figure# background white#savefig.dpi : figure # figure dots per inch or &apos;figure&apos;#savefig.facecolor : white # figure facecolor when saving#savefig.edgecolor : white # figure edgecolor when saving#savefig.format : png # png, ps, pdf, svg#savefig.bbox : standard # &apos;tight&apos; or &apos;standard&apos;. # &apos;tight&apos; is incompatible with pipe-based animation # backends but will workd with temporary file based ones: # e.g. setting animation.writer to ffmpeg will not work, # use ffmpeg_file instead#savefig.pad_inches : 0.1 # Padding to be used when bbox is set to &apos;tight&apos;#savefig.jpeg_quality: 95 # when a jpeg is saved, the default quality parameter.#savefig.directory : ~ # default directory in savefig dialog box, # leave empty to always use current working directory#savefig.transparent : False # setting that controls whether figures are saved with a # transparent background by default# tk backend params#tk.window_focus : False # Maintain shell focus for TkAgg# ps backend params#ps.papersize : letter # auto, letter, legal, ledger, A0-A10, B0-B10#ps.useafm : False # use of afm fonts, results in small files#ps.usedistiller : False # can be: None, ghostscript or xpdf # Experimental: may produce smaller files. # xpdf intended for production of publication quality files, # but requires ghostscript, xpdf and ps2eps#ps.distiller.res : 6000 # dpi#ps.fonttype : 3 # Output Type 3 (Type3) or Type 42 (TrueType)# pdf backend params#pdf.compression : 6 # integer from 0 to 9 # 0 disables compression (good for debugging)#pdf.fonttype : 3 # Output Type 3 (Type3) or Type 42 (TrueType)# svg backend params#svg.image_inline : True # write raster image data directly into the svg file#svg.fonttype : &apos;path&apos; # How to handle SVG fonts:# &apos;none&apos;: Assume fonts are installed on the machine where the SVG will be viewed.# &apos;path&apos;: Embed characters as paths -- supported by most SVG renderers# &apos;svgfont&apos;: Embed characters as SVG fonts -- supported only by Chrome,# Opera and Safari#svg.hashsalt : None # if not None, use this string as hash salt # instead of uuid4# docstring params#docstring.hardcopy = False # set this when you want to generate hardcopy docstring# Set the verbose flags. This controls how much information# matplotlib gives you at runtime and where it goes. The verbosity# levels are: silent, helpful, debug, debug-annoying. Any level is# inclusive of all the levels below it. If your setting is &quot;debug&quot;,# you&apos;ll get all the debug and helpful messages. When submitting# problems to the mailing-list, please set verbose to &quot;helpful&quot; or &quot;debug&quot;# and paste the output into your report.## The &quot;fileo&quot; gives the destination for any calls to verbose.report.# These objects can a filename, or a filehandle like sys.stdout.## You can override the rc default verbosity from the command line by# giving the flags --verbose-LEVEL where LEVEL is one of the legal# levels, e.g., --verbose-helpful.## You can access the verbose instance in your code# from matplotlib import verbose.#verbose.level : silent # one of silent, helpful, debug, debug-annoying#verbose.fileo : sys.stdout # a log filename, sys.stdout or sys.stderr# Event keys to interact with figures/plots via keyboard.# Customize these settings according to your needs.# Leave the field(s) empty if you don&apos;t need a key-map. (i.e., fullscreen : &apos;&apos;)#keymap.fullscreen : f, ctrl+f # toggling#keymap.home : h, r, home # home or reset mnemonic#keymap.back : left, c, backspace # forward / backward keys to enable#keymap.forward : right, v # left handed quick navigation#keymap.pan : p # pan mnemonic#keymap.zoom : o # zoom mnemonic#keymap.save : s # saving current figure#keymap.quit : ctrl+w, cmd+w # close the current figure#keymap.grid : g # switching on/off a grid in current axes#keymap.yscale : l # toggle scaling of y-axes (&apos;log&apos;/&apos;linear&apos;)#keymap.xscale : L, k # toggle scaling of x-axes (&apos;log&apos;/&apos;linear&apos;)#keymap.all_axes : a # enable all axes# Control location of examples data files#examples.directory : &apos;&apos; # directory to look in for custom installation###ANIMATION settings#animation.html : &apos;none&apos; # How to display the animation as HTML in # the IPython notebook. &apos;html5&apos; uses # HTML5 video tag.#animation.writer : ffmpeg # MovieWriter &apos;backend&apos; to use#animation.codec : h264 # Codec to use for writing movie#animation.bitrate: -1 # Controls size/quality tradeoff for movie. # -1 implies let utility auto-determine#animation.frame_format: &apos;png&apos; # Controls frame format used by temp files#animation.ffmpeg_path: &apos;ffmpeg&apos; # Path to ffmpeg binary. Without full path # $PATH is searched#animation.ffmpeg_args: &apos;&apos; # Additional arguments to pass to ffmpeg#animation.avconv_path: &apos;avconv&apos; # Path to avconv binary. Without full path # $PATH is searched#animation.avconv_args: &apos;&apos; # Additional arguments to pass to avconv#animation.mencoder_path: &apos;mencoder&apos; # Path to mencoder binary. Without full path # $PATH is searched#animation.mencoder_args: &apos;&apos; # Additional arguments to pass to mencoder#animation.convert_path: &apos;convert&apos; # Path to ImageMagick&apos;s convert binary. # On Windows use the full path since convert # is also the name of a system tool.]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python数据处理笔记matplotlib篇（一）]]></title>
    <url>%2F2017%2F09%2F01%2FPython%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0matplotlib%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[关键词：坐标轴范围，图像保存，坐标轴密度，axes自适应figure，matplotlib面向对象，部分理论概念 简单的小例子 123456789101112import matplotlib.pyplot as plt path = ""plt.plot([4,7,1,9,4]) #绘图，如果只有一个list默认其为Y轴，X轴数据为其索引值plt.ylabel("grade")plt.axis([-2,8,0,12]) #axis函数接收一个list，设定横纵坐标尺度，list各个参数分别代表[X初始刻度，X终止刻度，Y起始刻度，Y终止 刻]plt.savefig(path,dpi = 600) #savefig函数用来保存图片至path地址，dpi值表示每英寸具有的像素点数plt.show()------这个例子的关键词：坐标轴尺度、图像保存 plt.plot()简介： 1234567891011plt.plot(x, y, format_string, **kwargs) #这个函数是绘图的关键函数 #x ： X轴数据，列表或数组，可选 #y ： Y轴数据，列表或数组 #format_string ： 控制曲线的格式字符串，可选 #**kwargs ：第二组或更多(x,y,format_string)其中要说明的是format_string，包含的主要类型有颜色字符：'b','k'等风格字符：'-','--'等标记字符：每个数据点的标志方式,'.','*','o'等还要很多其他的参数值，到时候查文档 如何处理坐标轴的密度： 1234567891011121314#设置密度之前，需要知道关于axis的一些内容------class matplotlib.axis.XAxis(axes, pickradius=15)Init the axis with the parent Axes instance------class matplotlib.axis.YAxis(axes, pickradius=15)Init the axis with the parent Axes instance------需要用父类Axes的实例对matplot.axis.XAxis进行初始化为一个axis实例(xaxis和yaxis都是axis的子类)令axis实例为axes_xaxisfig,ax = plt.subplots()axes_xaxis = matplotlib.axis.XAxis(ax)#ax是matplotlib.axes.Axes的一个实例现在axes_xaxis就是一个Axis(XAxis)的实例 此处见过好多直接ax.xaxis.set_major……的使用方法，我的理解是，ax是一个父类的实例，可以直接调用任何的关于matplotlib.axis下的东西。有待考证(可用度不高，测试过，有的可，有的不可) 得出一个结论，能用plt就用plt，尽量不使用axes 12345678910111213141516#方法一：设置间隔法axes_xaxis.set_major_locator(matplotlib.ticker.MultipleLocator(5))#5代表每隔5个------ #也可以不进行实例化，直接使用如下的方式 ax.xaxis.set_major_locator(matplotlib.ticker.MultipleLocator(5))------#方法二：自动线性调整ax.xaxis.set_major_locator(ticker.LinearLocator(numticks=None, presets=None))------ 文档里LinearLocator的介绍 class matplotlib.ticker.LinearLocator(numticks=None, presets=None) Bases: matplotlib.ticker.Locator Determine the tick locations The first time this function is called it will try to set the number of ticks to make a nice tick partitioning. Thereafter the number of ticks will be fixed so that interactive navigation will be nice 第一次调用的时候就会根据坐标轴的大小，自动的给设置好留几个tick_label合适------ 关键词：坐标轴，密度 axes自动填充满figure 12mpl.rc('figure',autolayout = True)#autolyout使axes自适应整个figure框 如何令图片文件名称与title一致 1234#首先设定了title的内容ax.set_title('一程山路')#然后保存图片是，图片的名称是这个即可plt.savefig('%s.png'%(ax.get_title()),dpi = 300)#其中ax.get_title()即获取title NOTICE:当使用了twinx()之后，尽量使用如下方式实现图片的保存 12fig,ax = plt.subplots()fig.savefig(path,**kwargs)#使用fig实例进行保存操作 ####关于matplotlib的面向对象 1matplotlib.pyplot.subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw) 上面这个函数有两个返回值，他们分别如下： 12fig : matplotlib.figure.Figure objectax : matplotlib.axes.Axes object or array of Axes objects. 他们的关系由下图初见端倪：（fig是一个大面板，ax是这个面板上的区域，fig是由ax和其他一些东西组成的） 这两个类分别如下： 123456class matplotlib.figure.Figure(figsize=None, dpi=None, facecolor=None, edgecolor=None, linewidth=0.0, frameon=None, subplotpars=None, tight_layout=None)------Figure：这个类的实例有很多的方法，如：add_axes(*args, **kwargs)#添加一个axes，返回值是一个Axes实例add_subplot(*args, **kwargs)#添加一个若干个axes，并返回一个Axes实例数组------ 12345678class matplotlib.axes.Axes(fig, rect, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, axisbg=None, **kwargs)------Axes:这个类的方法有：plot(*args,**kwargs)#实例使用此方法即能绘制图像,并且十分强大scatter(*args,**kwargs)还有与pyplot中一一对应的方法：plt.xlabel()--&gt;ax.set_xlabel()&amp;ax.get_xlabel()#具体查文档------ 所以，小例子： 1234fig,ax = matplotlib.pyplot.subplots()fig.set_size_inches((w,h))ax.plot(x,y)ax.set_xlabel("hello") ###理论概念 绘图区域设置 绘图区域概念如下： 在matplotlib中，一个独立的图像（不管有多少小图像）是一个Figure对象，一个Figure对象中可以包含一个或者多个Axes对象，每个Axes对象都是一个拥有自己独立坐标系统的绘图区域，如下： 因此，可以在全局绘图区域中创建一个分区体系，并定位到一个子绘图区域 1234plt.subplot(nrows,ncols,plot_number)#区域分为nrows行，ncols列，现在绘制第plot_number个子图plt.subplot(3,2,4)#3行2列，选择第4个绘图区域，然后再使用plt.plot(参数)即可进行绘图了 一个Figure对应一张图片。Title为标题。Axis为坐标轴，Label为坐标轴标注。Tick为刻度线，Tick Label为刻度注释。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 学习手册精简版不断更新]]></title>
    <url>%2F2017%2F04%2F17%2Fgit%20%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C%E7%B2%BE%E7%AE%80%E7%89%88%EF%BC%88%E5%82%BB%E7%93%9C%E7%89%88%EF%BC%89%2F</url>
    <content type="text"><![CDATA[git上是现在十分常用的版本控制工具，GitHub作为其代码的托管中心。 基本操作第一步：首先要进入GitHub注册一下，并记住自己的用户名，邮箱和密码 第二步：找一个空白的文件夹，打开命令行窗口cd 到此目录下（具体的操作方法见http://blog.csdn.net/cdqn10086/article/details/53978825） 进行自报家门的操作 12git config --global user.name YourNamegit config --global user.email YourEmail 建立要进行版本控制的操作（建立一个文件夹，一切操作在其中进行） 1234mkdir demo01 %建立文件夹名字为demo01cd demo01 %进入此文件夹git init %进行init，将这个目录变成git管理的仓库进行完此项之后，会在demo01文件夹内有一个.git文件，要用ls -ah来查看隐藏文件。 对里面的文件进行操作（新建一个文本文档demo01.txt，并输入几句英文） 12git add demo01.txtgit commit -m &quot;this is the first demo&quot; ###远程仓库（GitHub） 第一步：获取SSH（打开命令行，进行如下操作） 1$ ssh-keygen -t rsa -C YourEmail 进行此命令之后，我们就可以找到文件夹.ssh ，因为.ssh文件件在主目录下，因此可以直接如下方式打开 1$ open ~/.ssh 第二步：找到我们需要的两个文件，id_rsa （私人秘钥，万勿泄露）和id_rsa.pub（公钥），然后登陆GitHub，找到Account settings中的SSH Keys，新建sshkey，title写一个平时常用的名字即可，key里面输入我们公钥里的所有的内容。 第三步：在GitHub的个人页处新添加一个仓库(我们新建的仓库名字就是demo01) 本地库关联远程库 第四步：为了让本地的与远程的同步，我们在本地的demo01仓库下运行如下的命令 12git init #初始化，如果上一步完成了这一步就不用了git remote add origin https://github.com/用户名/demo01.git (此时我们的远程库就叫做名字origin) 使用如下将本地库推送到远程库 1git push -u origin master 现在也就是完成了本地库的提交，以后，只要是有了新的改动，本地做了提交，都可以通过如下命令来进行把本地的master分支推送到GitHub。 1git push origin master 远程库克隆到本地 首先，要在GitHub上建立一个远程仓库并且生成readme.txt文件 然后，在选择你要保存的一个目录，在此目录下进行如下克隆 1git clone https://github.com/LiErhua（GitHub用户名）/demo02.git 然后会发现已经克隆到自己的硬盘本地了。 notice： 其中我们push和clone时，地址都是有两种选择的，一种是SSH，一种是http协议的分别如下 12git@github.com:你的GitHub用户名/文件夹名称.githttps://github.com/用户名/文件夹名称.git]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LaTeX入门系列之图表绘制（二）：进阶]]></title>
    <url>%2F2017%2F03%2F01%2FLaTeX%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E8%A1%A8%E7%BB%98%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[关键词：单元格合并与分割， 上一节，讨论了绘制表格的最基础的部分，这一节讲关于单元的合并分割。 有时候我们会遇到要将几个单元格合并为一个单元格的情况，用如下方法 对于同行不同单元格之间的合并使用命令 \multicolumn{合并单元格个数}{左对齐，居中，右对齐等选项}{单元格内容} 对于同列不同单元格合并使用宏包 \multirow{行数}{内容}，注意\一定要在 1234567891011121314151617\documentclass[border=&#123;30mm 3mm 30mm 3pt&#125;]&#123;standalone&#125;\usepackage&#123;multirow&#125;\usepackage&#123;ctex&#125;\begin&#123;document&#125;\begin&#123;tabular&#125;&#123;|l|c|c|r|&#125;\hline\multirow&#123;2&#125;*&#123;姓名&#125;&amp;\multicolumn&#123;3&#125;&#123;|c|&#125;&#123;项目&#125;\\\cline&#123;2-4&#125; &amp;吃&amp;喝&amp;玩\\\hline张三&amp;鱼&amp;酒&amp;吉他\\李四&amp;肉&amp;水&amp;code\\王麻子&amp;海鲜&amp;饮料&amp;羽毛球\\\hline\end&#123;tabular&#125;\end&#123;document&#125; 关键点： 这个图的关键点有如下几个： \multicolumn{3}{|c|}{项目}中的{|c|}连个竖线要有，默认不写时，表格内没有连线； \cline{2-4} 用于合并不同行单元格之后，划出不完全或者间断的分割线的； 表格的最上方和最左侧一行可以用特别的宏包来单独控制：\makecell 宏包 ​ 在\makecell{ } 中可以用 \\ 进行自由的换行 表头的斜线分割使用另一个宏包：\diagbox 宏包 \diagbox{左}{右} \diagbox{左}{中}{右} 123456789101112131415\documentclass[border=&#123;30mm 3pt 30mm 3pt&#125;]&#123;standalone&#125;\usepackage&#123;multirow&#125;\usepackage&#123;diagbox&#125;\usepackage&#123;ctex&#125;\begin&#123;document&#125;\begin&#123;tabular&#125;&#123;|l|c|c|r|&#125;\hline\diagbox&#123;姓名&#125;&#123;项目&#125; &amp;吃&amp;喝&amp;玩\\\hline张三&amp;鱼&amp;酒&amp;吉他\\李四&amp;肉&amp;水&amp;code\\王麻子&amp;海鲜&amp;饮料&amp;羽毛球\\\hline\end&#123;tabular&#125;\end&#123;document&#125; 练习题（习题来自于刘海洋老师的《LaTeX入门》一书的298页： 解答请见这里http://lierhua.top/2017/03/01/LaTeX%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>图表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LaTeX习题答案]]></title>
    <url>%2F2017%2F03%2F01%2FLaTeX%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88%2F</url>
    <content type="text"><![CDATA[以下是博客内个习题的答案 顺序为乱序，请按照习题图片或者要求或者标注寻找 习题： 答案： 123456789101112131415161718192021222324252627282930\documentclass[border=&#123;30mm 3pt 30mm 3pt&#125;]&#123;standalone&#125;\usepackage&#123;multirow&#125;\usepackage&#123;makecell&#125;\usepackage&#123;diagbox&#125;\usepackage&#123;ctex&#125;\begin&#123;document&#125;\begin&#123;tabular&#125;&#123;|c|cc|c|c|c|c|c|&#125;\hline% \multirow&#123;2&#125;*&#123;\makecell&#123;摩擦副\\配对材料&#125;&#125;&amp; \multicolumn&#123;2&#125;&#123;c|&#125;&#123;\multirow&#123;2&#125;*&#123;\diagbox&#123;锁紧结构&#125;&#123;锁紧力矩&#125;&#125;&#125; &amp;\multicolumn&#123;5&#125;&#123;c|&#125;&#123;供油压力(MPa)&#125;\\\cline&#123;4-8&#125; &amp; &amp; &amp;2&amp;5&amp;7&amp;10&amp;12\\\hline\multirow&#123;5&#125;*&#123;调质钢&#125;&amp;\multirow&#123;5&#125;*&#123;摩擦锥&#125;&amp;\multicolumn&#123;1&#125;&#123;|c|&#125;&#123;$\theta = 60^\circ$, 单槽&#125;&amp;1.3&amp;2.6&amp;2.9&amp;3.5&amp;3.8\\\cline&#123;3-8&#125; &amp; &amp;\multicolumn&#123;1&#125;&#123;|c|&#125;&#123;$\theta = 60^\circ$, 单槽&#125;&amp;1.8&amp;2.6&amp;3.9&amp;4.7&amp;5.1\\\cline&#123;3-8&#125; &amp; &amp;\multicolumn&#123;1&#125;&#123;|c|&#125;&#123;$\theta = 60^\circ$, 单槽&#125;&amp;1.8&amp;2.6&amp;3.9&amp;4.7&amp;5.1\\\cline&#123;3-8&#125; &amp; &amp;\multicolumn&#123;1&#125;&#123;|c|&#125;&#123;$\theta = 60^\circ$, 单槽&#125;&amp;1.8&amp;2.6&amp;3.9&amp;4.7&amp;5.1\\\cline&#123;3-8&#125; &amp; &amp;\multicolumn&#123;1&#125;&#123;|c|&#125;&#123;$\theta = 60^\circ$, 单槽&#125;&amp;1.8&amp;2.6&amp;3.9&amp;4.7&amp;5.1\\\hline\multirow&#123;2&#125;*&#123;H62&#125;&amp;\multicolumn&#123;2&#125;&#123;c|&#125;&#123;内摩擦环&#125;&amp;1.8&amp;2.6&amp;3.9&amp;4.7&amp;5.1\\\cline&#123;2-8&#125; &amp;\multicolumn&#123;2&#125;&#123;c|&#125;&#123;外摩擦环&#125;&amp;1.8&amp;2.6&amp;3.9&amp;4.7&amp;5.1\\\hline\end&#123;tabular&#125;\end&#123;document&#125; 关键点：multicolumn不仅可以进行行单元格合并处理，还可以对某个单元格的格式进行重新设置，比如更改边框 的添加等。]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>table,习题答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LaTeX入门系列之图表绘制（一）：基础]]></title>
    <url>%2F2017%2F03%2F01%2FLaTeX%E7%BB%98%E5%88%B6%E5%9B%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[LaTeX的图表因为其缺乏直观的代码对初学者不甚友好，我在这里对LaTeX中的基本的图表绘制做一个综述，方便各种图表绘制时的备查。 表格是一种二维的信息表达形式。 ###基础表格绘制 一般使用 tabular 环境进行表格的排布 使用 array 环境进行包含数学符号等的内容的排布 12345678910\begin&#123;tabular&#125;[对齐(可选有t和b)]&#123;列格式(lcr等三种形式)&#125;内容&amp;内容&amp;……&amp;内容\\……\end&#123;tabular&#125;其中列格式有如下：l: 左对齐列c: 居中对齐r: 右对齐列p&#123;&#125;: 固定此列的宽度，可自动换行|：列与列之间添加分隔的竖线 1234\begin&#123;array&#125;[对齐]&#123;列格式&#125;内容&amp;内容&amp;……&amp;内容\\……\end&#123;array&#125; 其中，\\表示换行，用&amp;表示不同单元格的分隔。 tabular 和 array 表示的都是一个普通的盒子，因此是直接与其他的文字或公式混合在一起的，我们可以将其置于一个浮动体中来规避。 一个普通表格例子： 1234567891011121314\documentclass[a4paper]&#123;article&#125;\usepackage&#123;ctex&#125;\begin&#123;document&#125; \begin&#123;tabular&#125;&#123;|c|ccc|p&#123;3cm&#125;|&#125;\hline空&amp;吃&amp;喝&amp;玩&amp;乐\\\hline 张三&amp;鱼&amp;酒&amp;吉他&amp;赚钱\\李四&amp;肉&amp;水&amp;code&amp;赚钱\\王麻子&amp;海鲜&amp;饮料&amp;羽毛球&amp;赚钱\\\hline\end&#123;tabular&#125;\end&#123;document&#125; 一个行列式例子： 12345678910111213\documentclass[]&#123;article&#125;\usepackage&#123;ctex&#125;\begin&#123;document&#125;$\left( %行列式中大部分都会含有数学成分，因此需要使用将其全部加入$$公式环境中\begin&#123;tabular&#125;&#123;lcc|r&#125; &amp;吃&amp;喝&amp;玩\\张三&amp;鱼&amp;酒&amp;吉他\\李四&amp;肉&amp;水&amp;code\\王麻子&amp;海鲜&amp;饮料&amp;羽毛球\\\end&#123;tabular&#125;\right)$%注意两边大括号的书写方式\left(和\right)\end&#123;document&#125; 改变行列间距的方法 列间距：最小距离的一半由变量 \tabcolsep 和 \arraycolsep 控制 行间距：由宏 \arraystretch 控制 12345678910111213141516171819\documentclass[border=&#123;30mm 3mm 30mm 3mm&#125;]&#123;standalone&#125;\usepackage&#123;ctex&#125;\begin&#123;document&#125;%---------------%\arraystretch是宏，默认值是1，通过如下修改可以改变其间隔的倍数\renewcommand\arraystretch&#123;2&#125;\setlength\tabcolsep&#123;10mm&#125;%\tabcolsep是变量，对应的是具体的数值%---------------$\left( \begin&#123;tabular&#125;&#123;lcc|r&#125; &amp;吃&amp;喝&amp;玩\\张三&amp;鱼&amp;酒&amp;吉他\\李四&amp;肉&amp;水&amp;code\\王麻子&amp;海鲜&amp;饮料&amp;羽毛球\\\end&#123;tabular&#125;\right)$\end&#123;document&#125; NOTICE：\arraystretch是宏，所以用\renewcommand 来设定 ​ \tabcolsep 是变量，用 \setlength 设定]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>图表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo & NexT添加菜单分类并作为文章目录]]></title>
    <url>%2F2017%2F01%2F01%2FHexo%26NexT%E6%B7%BB%E5%8A%A0%E8%8F%9C%E5%8D%95%E5%88%86%E7%B1%BB%E5%B9%B6%E4%BD%9C%E4%B8%BA%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[生成默认已有的分类 在NexT中，默认的menu有：首页，归档，分类，标签，关于 以标签 tags 为例： 12$hexo new page &quot;tags&quot;//在 hexo &gt; source 文件夹会出现一个tags文件夹 然后： 在 tags 文件夹的index.md文档中添加 type: tags 在 NexT 内的 _config 文档的menu中恢复 tags 的使用 生成没有的分类1$hexo new page &quot;essay&quot; 然后： 在 essay 文件夹下的 index.md 文档中添加 “type: essay “ 在NexT的config的menu中添加 essay: /categories/essay 在NexT的languages中修改中文文件，添加essay的中文显示 在需要放入 essay 菜单的文章的 front matter 中添加 categories: essay]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在hexo添加一个标签云页面]]></title>
    <url>%2F2017%2F01%2F01%2F%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[添加一个标签云页面，并在菜单中显示页面链接。 新建一个页面，命名为 tags 。命令如下： 1hexo new page &quot;tags&quot; 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。 1234title: All tagsdate: 2014-12-22 12:39:04type: &quot;tags&quot;--- 注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如： 12345title: All tagsdate: 2014-12-22 12:39:04type: &quot;tags&quot;comments: false--- 在菜单中添加链接。编辑主题的 _config.yml ，添加 tags 到 menu 中，如下: 1234menu: home: / archives: /archives tags: /tags 神器：IPic图床工具，可以把图片传至图床，生成Markdown格式的链接 More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
